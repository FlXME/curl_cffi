from urllib.request import urlretrieve
import os
import platform
import sys
import shutil
import subprocess

uname = platform.uname()

VERSION="0.5.4"
CURL_VERSION="7.84.0"
CONST_FILE="curl_cffi/_const.py"
if uname.system == "Windows":
    LIBDIR = "./lib"
elif uname.system == "Darwin" and uname.machine == "x86_64":
    LIBDIR = "/Users/runner/work/_temp/install/lib"
else:
    LIBDIR="/usr/local/lib"


def reporthook(blocknum, blocksize, totalsize):
    readsofar = blocknum * blocksize
    if totalsize > 0:
        percent = readsofar * 1e2 / totalsize
        s = "\r%5.1f%% %*d / %d" % (
            percent, len(str(totalsize)), readsofar, totalsize)
        sys.stderr.write(s)
        if readsofar >= totalsize: # near the end
            sys.stderr.write("\n")
    else: # total size is unknown
        sys.stderr.write("read %d\n" % (readsofar,))


print("Download firefox certs, see: https://curl.se/docs/caextract.html")
urlretrieve("https://curl.se/ca/cacert.pem", "curl_cffi/cacert.pem", reporthook)


def is_musl():
    libc, version = platform.libc_ver()
    return libc != "glibc"


if uname.system == "Darwin":
    if uname.machine == "arm64":
        # TODO Download my own build of libcurl-impersonate for M1 Mac
        url = ""
        filename = "./curl-impersonate.tar.gz"
    else:
        url = f"https://github.com/lwthiker/curl-impersonate/releases/download/v{VERSION}/libcurl-impersonate-v{VERSION}.{uname.machine}-macos.tar.gz"
        filename = "./curl-impersonate.tar.gz"
elif uname.system == "Windows":
    url = f"https://github.com/yifeikong/curl-impersonate-win/releases/download/v{VERSION}/curl-impersonate-chrome.tar.gz"
    filename = "./curl-impersonate.tar.gz"
else:
    if is_musl():
        url = f"https://img.yifei.me/file/onefly-public/static/2023/libcurl-impersonate-v{VERSION}.{uname.machine}-linux-musl.tar.gz"
    else:
        url = f"https://github.com/lwthiker/curl-impersonate/releases/download/v{VERSION}/libcurl-impersonate-v{VERSION}.{uname.machine}-linux-gnu.tar.gz"
    filename = "./curl-impersonate.tar.gz"
if os.path.exists(filename):
    print("libcurl-impersonate already exists")
else:
    print(f"Download libcurl-impersonate-chrome from {url}")
    urlretrieve(url, filename, reporthook)
shutil.unpack_archive(filename, LIBDIR)


# TODO download curl automatically

if uname.system != "Windows":
    print("extract consts from curl.h")
    with open(CONST_FILE, "w") as f:
        f.write("# This file is automatically generated, do not modify it directly.\n\n")
        f.write("from enum import IntEnum\n\n\n")
        f.write("class CurlOpt(IntEnum):\n")
        cmd = r"""
            echo '#include "curl_cffi/include/curl/curl.h"' | gcc -E - | grep -i "CURLOPT_.\+ =" | sed "s/  CURLOPT_/    /g" | sed "s/,//g"
        """
        output = subprocess.check_output(cmd, shell=True)
        f.write(output.decode())
        f.write("""
    if locals().get("WRITEDATA"):
        FILE = locals().get("WRITEDATA")
    if locals().get("READDATA"):
        INFILE = locals().get("READDATA")
    if locals().get("HEADERDATA"):
        WRITEHEADER = locals().get("HEADERDATA")\n\n
""")
        f.write("class CurlInfo(IntEnum):\n")
        cmd = r"""
            echo '#include "curl_cffi/include/curl/curl.h"' | gcc -E - | grep -i "CURLINFO_.\+ =" | sed "s/  CURLINFO_/    /g" | sed "s/,//g"
        """
        output = subprocess.check_output(cmd, shell=True)
        f.write(output.decode())
        f.write("""
    if locals().get("RESPONSE_CODE"):
        HTTP_CODE = locals().get("RESPONSE_CODE")\n
    """)

